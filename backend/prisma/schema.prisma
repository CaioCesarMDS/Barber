generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SystemRole {
  ADMIN
  BARBER
  CLIENT
}

enum BarbershopRole {
  OWNER
  BARBER
}

model User {
  id        String   @id @default(uuid())
  name      String
  birthDate DateTime
  phone     String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  role SystemRole @default(CLIENT)

  bookings     Booking[]
  affiliations BarbershopEmployee[]
}

model Barbershop {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
  addressId String  @unique

  address   Address @relation(fields: [addressId], references: [id], onDelete: Restrict)

  services  Service[]
  bookings  Booking[]
  employees BarbershopEmployee[]
}

model BarbershopEmployee {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  userId       String
  barbershopId String
  role         BarbershopRole @default(BARBER)

  user       User       @relation(fields: [userId], references: [id])
  barbershop Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Restrict)
  bookings   Booking[]  @relation("EmployeeBookings")

  @@unique([userId, barbershopId])
}

model Address {
  id           String @id @default(uuid())
  number       String
  street       String
  neighborhood String
  city         String
  state        String
  country      String
  zipCode      String

  barbershop Barbershop?
}

model Service {
  id          String          @id @default(uuid())
  name        String
  description String?
  category    ServiceCategory
  price       Decimal         @db.Decimal(10, 2)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Restrict)

  bookings Booking[]
}

enum ServiceCategory {
  HAIRCUT
  BEARD
  FINISHING
  COLORING
  COMBOS
  OTHER
}

model Booking {
  id        String   @id @default(uuid())
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId       String
  barbershopId String
  serviceId    String
  employeeId   String?

  user       User                @relation(fields: [userId], references: [id], onDelete: Restrict)
  barbershop Barbershop          @relation(fields: [barbershopId], references: [id], onDelete: Restrict)
  service    Service             @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  employee   BarbershopEmployee? @relation("EmployeeBookings", fields: [employeeId], references: [id], onDelete: SetNull)
}
